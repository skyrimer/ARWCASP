import streamlit as st  # Streamlit for UI
import geopandas as gpd  # GeoPandas for spatial data
import pandas as pd  # Pandas for tabular data
import folium  # Folium for interactive maps
from folium import GeoJson, GeoJsonTooltip, LayerControl  # Folium map features
from streamlit_folium import folium_static  # To embed Folium maps in Streamlit
import branca.colormap as cm  # For map color scales
import os  # To interact with the file system

# --- Page setup ---
# Configure Streamlit app layout and title
st.set_page_config(layout="wide", page_title="London Crime Risk Dashboard")
st.title("London Crime Risk Mapüìç")

# --- Sidebar: Feature descriptions ---
st.sidebar.header("‚ÑπÔ∏è Feature Descriptions")
descriptions = {
    "deprivation_index": "Measures local economic and social disadvantage.",
    "seasonality": "Captures predictable seasonal variations in crime.",
    "previous_burglaries": "Historical frequency of burglaries in the area.",
    "bus_stop_density": "Indicates busy areas with high foot traffic.",
    "distance_police": "Proximity to the nearest police station.",
    "ethnic_diversity_index": "Represents demographic diversity in the area.",
    "average_age": "Average age of residents in the area.",
    "avg_people_per_household": "Average number of people living per home.",
    "social_rent_pct": "Proportion of social housing in the area.",
    "flat_pct": "Percentage of flats versus houses.",
    "security_measures_index": "Assumed private security effectiveness.",
    "spillover_effect": "Influence from crime in neighboring areas.",
    "proximity_to_city_center": "Distance from central London.",
    "road_network_complexity": "Influences accessibility and escape routes."
}
for key, desc in descriptions.items():
    st.sidebar.markdown(f"**{key.replace('_', ' ').title()}**: {desc}")

# --- Sidebar: Upload data files (to simplify actualization of data) ---
st.sidebar.header("üîÑ Upload Data Files")
pred_file = st.sidebar.file_uploader("Upload sample_predictions.parquet", type="parquet")
hist_file = st.sidebar.file_uploader("Upload merged_data.parquet", type="parquet")
if not pred_file or not hist_file:
    st.warning("Please upload both `sample_predictions.parquet` and `merged_data.parquet` to continue.")
    st.stop()

# --- Read uploaded data ---
df_pred = pd.read_parquet(pred_file)
df_hist = pd.read_parquet(hist_file)

# --- Normalize historical LSOA code field ---
hist_lsoa_candidates = [c for c in df_hist.columns if 'lsoa' in c.lower()]
if not hist_lsoa_candidates:
    st.error("No LSOA code field found in historical data. Check column names.")
    st.stop()
hist_lsoa_field = hist_lsoa_candidates[0]
df_hist = df_hist.rename(columns={hist_lsoa_field: 'LSOA_code'})

# --- Parse dates in historical data ---
if 'date' in df_hist.columns:
    df_hist['date'] = pd.to_datetime(df_hist['date'])
else:
    st.error("`merged_data.parquet` must contain a 'date' column.")
    st.stop()

# --- Generate month list ---
df_hist['month_name'] = df_hist['date'].dt.strftime('%B')
avail_months = sorted(
    df_hist['month_name'].unique(),
    key=lambda m: pd.to_datetime(m, format='%B').month
)

# --- Controls: View Mode & Month selects ---
view_mode = st.radio(
    "Select View Mode", [
        "Prediction (Current Month)",
        "Actual (One Past Month)",
        "Prediction vs Actual (One Past Month)",
        "Compare Two Past Months (Actual)"
    ]
)
selected_month_1 = None
selected_month_2 = None
if view_mode in ["Actual (One Past Month)", "Prediction vs Actual (One Past Month)"]:
    selected_month_1 = st.selectbox("Select Past Month", avail_months)
if view_mode == "Compare Two Past Months (Actual)":
    selected_month_1 = st.selectbox("Select First Past Month", avail_months, index=0)
    selected_month_2 = st.selectbox("Select Second Past Month", avail_months, index=1)

# --- Shapefile path: LSOA only ---
shapefile_folder = r"C:\Users\20231096\Downloads\LSOA_Boundaries\LSOA_2011_London_region"

# --- Load LSOA geodata ---
def load_lsoa_geodata(folder):
    """
    Reads all .shp files in the folder, concatenates them,
    and returns a GeoDataFrame in EPSG:4326.
    """
    shp_files = [os.path.join(folder, f) for f in os.listdir(folder) if f.lower().endswith('.shp')]
    if not shp_files:
        st.error(f"No .shp files found in {folder}")
        st.stop()
    gdfs = [gpd.read_file(shp) for shp in shp_files]
    gdf = gpd.GeoDataFrame(pd.concat(gdfs, ignore_index=True))
    return gdf.to_crs(epsg=4326)

gdf = load_lsoa_geodata(shapefile_folder)
gdf['geometry'] = gdf['geometry'].simplify(tolerance=0.0005, preserve_topology=True)

# --- Merge prediction data onto geodata ---
pred_col = df_pred.columns[0]
df_pred = df_pred.reset_index().rename(columns={'index': 'LSOA_code', pred_col: 'predicted_burglaries'})
lsoa_candidates = [c for c in gdf.columns if 'lsoa' in c.lower()]
if not lsoa_candidates:
    st.error("No LSOA code field found in shapefile data. Check column names.")
    st.stop()
lsoa_field = lsoa_candidates[0]
gdf = gdf.merge(df_pred, how='left', left_on=lsoa_field, right_on='LSOA_code')

# --- Map rendering function ---
def render_map(gdf_map, column, caption):
    """
    Creates a Folium choropleth for `column` values in `gdf_map`.
    """
    if column not in gdf_map.columns:
        st.error(f"Column '{column}' not found for mapping.")
        st.stop()
    col_data = gdf_map[column].dropna()
    if col_data.empty:
        st.error(f"No data available for '{column}'.")
        st.stop()
    cmap = cm.linear.YlOrRd_09.scale(float(col_data.min()), float(col_data.max()))
    cmap.caption = caption
    m = folium.Map(location=[51.5074, -0.1278], zoom_start=10, tiles="cartodbpositron")

    def style_function(feat):
        raw = feat['properties'].get(column)
        val = raw if raw is not None else 0
        return {'fillColor': cmap(val), 'color': 'black', 'weight': 0.3, 'fillOpacity': 0.7}

    name_field = next((c for c in gdf_map.columns if 'name' in c.lower() or c.lower().endswith('nm')), None)
    fields, aliases = [], []
    if name_field:
        fields.append(name_field); aliases.append('Name')
    fields.append(column); aliases.append(caption)
    GeoJson(
        gdf_map,
        name=caption,
        style_function=style_function,
        tooltip=GeoJsonTooltip(fields=fields, aliases=aliases, localize=True)
    ).add_to(m)
    cmap.add_to(m)
    LayerControl().add_to(m)
    return m

# --- Display maps based on view mode ---
if view_mode == "Prediction (Current Month)":
    st.subheader("üó∫Ô∏è Predicted Burglaries (Current Month)")
    folium_static(render_map(gdf, 'predicted_burglaries', 'Predicted Burglaries'), height=600)

elif view_mode == "Actual (One Past Month)" and selected_month_1:
    df_m1 = df_hist[df_hist['month_name'] == selected_month_1][['LSOA_code', 'Burglaries amount']]
    if df_m1.empty:
        st.error(f"No historical data for {selected_month_1}.")
        st.stop()
    df_m1 = df_m1.rename(columns={'Burglaries amount': 'actual_burglaries'})
    merged = gdf.merge(df_m1, how='left', on='LSOA_code')
    st.subheader(f"üó∫Ô∏è Actual Burglaries - {selected_month_1}")
    folium_static(render_map(merged, 'actual_burglaries', f'Actual Burglaries ({selected_month_1})'), height=600)

elif view_mode == "Prediction vs Actual (One Past Month)" and selected_month_1:
    df_m1 = df_hist[df_hist['month_name'] == selected_month_1][['LSOA_code', 'Burglaries amount']]
    df_m1 = df_m1.rename(columns={'Burglaries amount': 'actual_burglaries'})
    merged = gdf.merge(df_m1, how='left', on='LSOA_code')
    col1, col2 = st.columns(2)
    with col1:
        st.subheader("üìà Predicted Burglaries (Current Month)")
        folium_static(render_map(gdf, 'predicted_burglaries', 'Predicted Burglaries'), height=600)
    with col2:
        st.subheader(f"üìä Actual Burglaries ({selected_month_1})")
        folium_static(render_map(merged, 'actual_burglaries', f'Actual Burglaries ({selected_month_1})'), height=600)

elif view_mode == "Compare Two Past Months (Actual)" and selected_month_1 and selected_month_2:
    df1 = df_hist[df_hist['month_name'] == selected_month_1][['LSOA_code', 'Burglaries amount']].rename(columns={'Burglaries amount': f'burg_{selected_month_1.lower()}'})
    df2 = df_hist[df_hist['month_name'] == selected_month_2][['LSOA_code', 'Burglaries amount']].rename(columns={'Burglaries amount': f'burg_{selected_month_2.lower()}'})
    merged12 = gdf.merge(df1, how='left', on='LSOA_code').merge(df2, how='left', on='LSOA_code')
    col1, col2 = st.columns(2)
    with col1:
        st.subheader(f"üìä Actual Burglaries ({selected_month_1})")
        folium_static(render_map(merged12, f'burg_{selected_month_1.lower()}', f'Burglaries ({selected_month_1})'), height=600)
    with col2:
        st.subheader(f"üìä Actual Burglaries ({selected_month_2})")
        folium_static(render_map(merged12, f'burg_{selected_month_2.lower()}', f'Burglaries ({selected_month_2})'), height=600)
